<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20251.25.0520.1026                               -->
<workbook original-version='18.1' source-build='2025.1.2 (20251.25.0520.1026)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AccessibleZoneTabOrder />
    <AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <MarkAnimation />
    <ObjectModelEncapsulateLegacy />
    <ObjectModelExtractV2 />
    <ObjectModelTableType />
    <SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <_.fcp.VConnDownstreamExtractsWithWarnings.true...VConnDownstreamExtractsWithWarnings />
    <WindowsPersistSimpleIdentifiers />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='happiness_all_years' inline='true' name='federated.0wxfwpy1jfrjs218232xr0twenqf' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='happiness_all_years' name='textscan.18pn9ug0p8wlqq13ur7dg0w819fw'>
            <connection class='textscan' directory='C:/Users/serge_0bz7cup/OneDrive/DS_AI/Tableau/project/world_happiness_report/Data' filename='happiness_all_years.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.18pn9ug0p8wlqq13ur7dg0w819fw' name='happiness_all_years.csv' table='[happiness_all_years#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_DE'>
            <column datatype='string' name='Country name' ordinal='0' />
            <column datatype='integer' name='Happiness rank' ordinal='1' />
            <column datatype='string' name='Happiness score' ordinal='2' />
            <column datatype='string' name='Log GDP per capita' ordinal='3' />
            <column datatype='string' name='Social support' ordinal='4' />
            <column datatype='string' name='Healthy life expectancy' ordinal='5' />
            <column datatype='string' name='Freedom to make life choices' ordinal='6' />
            <column datatype='string' name='Generosity' ordinal='7' />
            <column datatype='string' name='Perceptions of corruption' ordinal='8' />
            <column datatype='integer' name='Year' ordinal='9' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[happiness_all_years.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;â‚¬&quot;</attribute>
              <attribute datatype='string' name='decimal-char'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_DE&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='thousands-char'>&quot;.&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country name]</local-name>
            <parent-name>[happiness_all_years.csv]</parent-name>
            <remote-alias>Country name</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Happiness rank</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Happiness rank]</local-name>
            <parent-name>[happiness_all_years.csv]</parent-name>
            <remote-alias>Happiness rank</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Happiness score</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Happiness score]</local-name>
            <parent-name>[happiness_all_years.csv]</parent-name>
            <remote-alias>Happiness score</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Log GDP per capita</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Log GDP per capita]</local-name>
            <parent-name>[happiness_all_years.csv]</parent-name>
            <remote-alias>Log GDP per capita</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Social support</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Social support]</local-name>
            <parent-name>[happiness_all_years.csv]</parent-name>
            <remote-alias>Social support</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Healthy life expectancy</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Healthy life expectancy]</local-name>
            <parent-name>[happiness_all_years.csv]</parent-name>
            <remote-alias>Healthy life expectancy</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Freedom to make life choices</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Freedom to make life choices]</local-name>
            <parent-name>[happiness_all_years.csv]</parent-name>
            <remote-alias>Freedom to make life choices</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Generosity</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Generosity]</local-name>
            <parent-name>[happiness_all_years.csv]</parent-name>
            <remote-alias>Generosity</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Perceptions of corruption</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Perceptions of corruption]</local-name>
            <parent-name>[happiness_all_years.csv]</parent-name>
            <remote-alias>Perceptions of corruption</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[happiness_all_years.csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='max GDP' datatype='real' name='[Calculation_1261570877838663680]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{FIXED [Year] : MAX([Log GDP per capita])}' />
      </column>
      <column caption='Max Happiness score' datatype='integer' name='[Calculation_1261570877843476485]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='10' />
      </column>
      <column caption='GDP Color' datatype='string' name='[Calculation_1261570878024765446]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Log GDP per capita]/ [Calculation_1261570877838663680] &lt; 0.5 THEN &quot;red&quot;  &#13;&#10;ELSEIF [Log GDP per capita]/ [Calculation_1261570877838663680] &lt; 0.75 THEN &quot;yellow&quot;  &#13;&#10;ELSE &quot;green&quot;  &#13;&#10;END' />
      </column>
      <column caption='Corruption Diff' datatype='real' default-format='p0%' name='[Calculation_1261570878029086728]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([max Generosity (copy)_1261570877843177475] - [Perceptions of corruption])/[max Generosity (copy)_1261570877843177475]' />
      </column>
      <column caption='Freedom Diff' datatype='real' default-format='p0%' name='[Corruption Diff (copy)_1261570878038765579]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([max Corruption (copy)_1261570878035443721] - [Freedom to make life choices])/[max Corruption (copy)_1261570878035443721]' />
      </column>
      <column datatype='string' name='[Country name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='GDP Diff' datatype='real' default-format='p0%' name='[Freedom Diff (copy)_1261570878040260620]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Calculation_1261570877838663680] - [Log GDP per capita])/[Calculation_1261570877838663680]' />
      </column>
      <column datatype='real' datatype-customized='true' name='[Freedom to make life choices]' role='measure' type='quantitative' />
      <column caption='Corruption Color' datatype='string' name='[GDP Color (copy)_1261570878026129415]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Perceptions of corruption]/ [max Generosity (copy)_1261570877843177475] &lt; 0.5 THEN &quot;red&quot;  &#13;&#10;ELSEIF [Perceptions of corruption]/ [max Generosity (copy)_1261570877843177475] &lt; 0.75 THEN &quot;yellow&quot;  &#13;&#10;ELSE &quot;green&quot;  &#13;&#10;END' />
      </column>
      <column caption='Freedom Color' datatype='string' name='[GDP Color (copy)_1261570878035779594]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Freedom to make life choices]/ [max Corruption (copy)_1261570878035443721] &lt; 0.5 THEN &quot;red&quot;  &#13;&#10;ELSEIF [Freedom to make life choices]/ [max Corruption (copy)_1261570878035443721] &lt; 0.75 THEN &quot;yellow&quot;  &#13;&#10;ELSE &quot;green&quot;  &#13;&#10;END' />
      </column>
      <column datatype='real' datatype-customized='true' name='[Generosity]' role='measure' type='quantitative' />
      <column datatype='real' datatype-customized='true' name='[Happiness score]' role='measure' type='quantitative' />
      <column datatype='real' datatype-customized='true' name='[Healthy life expectancy]' role='measure' type='quantitative' />
      <column datatype='real' datatype-customized='true' name='[Log GDP per capita]' role='measure' type='quantitative' />
      <column datatype='real' datatype-customized='true' name='[Perceptions of corruption]' role='measure' type='quantitative' />
      <column datatype='real' datatype-customized='true' name='[Social support]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
      <column caption='happiness_all_years.csv' datatype='table' name='[__tableau_internal_object_id__].[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]' role='measure' type='quantitative' />
      <column caption='max Freedom' datatype='real' name='[max Corruption (copy)_1261570878035443721]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{FIXED [Year] : MAX([Freedom to make life choices])}' />
      </column>
      <column caption='max Generosity' datatype='real' name='[max GDP (copy)_1261570877842857985]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{FIXED [Year] : MAX([Generosity])}' />
      </column>
      <column caption='max Healthy' datatype='real' name='[max GDP (copy)_1261570877843075074]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{FIXED [Year] : MAX([Healthy life expectancy])}' />
      </column>
      <column caption='max Corruption' datatype='real' name='[max Generosity (copy)_1261570877843177475]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{FIXED [Year] : MAX([Perceptions of corruption])}' />
      </column>
      <column caption='max Social' datatype='real' name='[max Generosity (copy)_1261570877843337220]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{FIXED [Year] : MAX([Social support])}' />
      </column>
      <column-instance column='[Calculation_1261570877838663680]' derivation='Attribute' name='[attr:Calculation_1261570877838663680:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Country name]' derivation='Attribute' name='[attr:Country name:nk]' pivot='key' type='nominal' />
      <column-instance column='[Log GDP per capita]' derivation='Attribute' name='[attr:Log GDP per capita:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1261570877838663680]' derivation='Avg' name='[avg:Calculation_1261570877838663680:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Log GDP per capita]' derivation='Avg' name='[avg:Log GDP per capita:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1261570877838663680]' derivation='Max' name='[max:Calculation_1261570877838663680:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Freedom to make life choices]' derivation='Max' name='[max:Freedom to make life choices:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Log GDP per capita]' derivation='Max' name='[max:Log GDP per capita:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Perceptions of corruption]' derivation='Max' name='[max:Perceptions of corruption:qk]' pivot='key' type='quantitative' />
      <column-instance column='[max Corruption (copy)_1261570878035443721]' derivation='Max' name='[max:max Corruption (copy)_1261570878035443721:qk]' pivot='key' type='quantitative' />
      <column-instance column='[max Generosity (copy)_1261570877843177475]' derivation='Max' name='[max:max Generosity (copy)_1261570877843177475:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1261570878024765446]' derivation='None' name='[none:Calculation_1261570878024765446:nk]' pivot='key' type='nominal' />
      <column-instance column='[Country name]' derivation='None' name='[none:Country name:nk]' pivot='key' type='nominal' />
      <column-instance column='[GDP Color (copy)_1261570878026129415]' derivation='None' name='[none:GDP Color (copy)_1261570878026129415:nk]' pivot='key' type='nominal' />
      <column-instance column='[GDP Color (copy)_1261570878035779594]' derivation='None' name='[none:GDP Color (copy)_1261570878035779594:nk]' pivot='key' type='nominal' />
      <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Calculation_1261570877838663680]' derivation='Sum' name='[sum:Calculation_1261570877838663680:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Perceptions of corruption]' derivation='Sum' name='[sum:Perceptions of corruption:qk]' pivot='key' type='quantitative' />
      <column-instance column='[max Generosity (copy)_1261570877843177475]' derivation='Sum' name='[sum:max Generosity (copy)_1261570877843177475:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1261570877838663680]' derivation='User' name='[usr:Calculation_1261570877838663680:qk]' pivot='key' type='quantitative' />
      <group caption='Action (Country name,Year)' hidden='true' name='[Action (Country name,Year)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Country name]' />
          <groupfilter function='level-members' level='[none:Year:ok]' />
        </groupfilter>
      </group>
      <extract _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' object-id='' units='records'>
        <connection access_mode='readonly' author-locale='en_US' class='hyper' dbname='C:/Users/SERGE_~1/AppData/Local/Temp/TableauTemp/#TableauTemp_0rtl4cu0sw8pit12lld4f0hl3g1p.hyper' default-settings='hyper' schema='Extract' sslmode='' tablename='Extract' update-time='07/17/2025 10:48:49 AM' username='tableau_internal_user'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Country name</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Country name]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Country name</remote-alias>
              <ordinal>0</ordinal>
              <family>happiness_all_years.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>174</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <object-id>[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Happiness rank</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Happiness rank]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Happiness rank</remote-alias>
              <ordinal>1</ordinal>
              <family>happiness_all_years.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>159</approx-count>
              <contains-null>true</contains-null>
              <object-id>[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Happiness score</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Happiness score]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Happiness score</remote-alias>
              <ordinal>2</ordinal>
              <family>happiness_all_years.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1086</approx-count>
              <contains-null>true</contains-null>
              <object-id>[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Log GDP per capita</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Log GDP per capita]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Log GDP per capita</remote-alias>
              <ordinal>3</ordinal>
              <family>happiness_all_years.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1057</approx-count>
              <contains-null>true</contains-null>
              <object-id>[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Social support</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Social support]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Social support</remote-alias>
              <ordinal>4</ordinal>
              <family>happiness_all_years.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>975</approx-count>
              <contains-null>true</contains-null>
              <object-id>[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Healthy life expectancy</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Healthy life expectancy]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Healthy life expectancy</remote-alias>
              <ordinal>5</ordinal>
              <family>happiness_all_years.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>918</approx-count>
              <contains-null>true</contains-null>
              <object-id>[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Freedom to make life choices</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Freedom to make life choices]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Freedom to make life choices</remote-alias>
              <ordinal>6</ordinal>
              <family>happiness_all_years.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>826</approx-count>
              <contains-null>true</contains-null>
              <object-id>[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Generosity</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Generosity]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Generosity</remote-alias>
              <ordinal>7</ordinal>
              <family>happiness_all_years.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>698</approx-count>
              <contains-null>true</contains-null>
              <object-id>[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Perceptions of corruption</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Perceptions of corruption]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Perceptions of corruption</remote-alias>
              <ordinal>8</ordinal>
              <family>happiness_all_years.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>685</approx-count>
              <contains-null>true</contains-null>
              <object-id>[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Year</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Year]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Year</remote-alias>
              <ordinal>9</ordinal>
              <family>happiness_all_years.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>10</approx-count>
              <contains-null>true</contains-null>
              <object-id>[happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52]</object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' rowDisplayCount='2000' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[attr:Country name:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Eswatini Kingdom of&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Palestinian Territories&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Somaliland Region&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Hong Kong SAR China&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Turkiye&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Somaliland region&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Trinidad  Tobago&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Northern Cyprus&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Congo (Brazzaville)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Congo (Kinshasa)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ivory Coast&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;North Cyprus&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Swaziland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;State of Palestine&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Taiwan Province of China&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Macedonia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Hong Kong S.A.R. of China&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_1261570878024765446:nk]' palette='traffic_light_10_0' type='palette'>
            <map to='#59a14f'>
              <bucket>&quot;green&quot;</bucket>
            </map>
            <map to='#b60a1c'>
              <bucket>&quot;red&quot;</bucket>
            </map>
            <map to='#f0bd27'>
              <bucket>&quot;yellow&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:GDP Color (copy)_1261570878026129415:nk]' palette='traffic_light_10_0' type='palette'>
            <map to='#59a14f'>
              <bucket>&quot;green&quot;</bucket>
            </map>
            <map to='#b60a1c'>
              <bucket>&quot;red&quot;</bucket>
            </map>
            <map to='#f0bd27'>
              <bucket>&quot;yellow&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country name:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Eswatini Kingdom of&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Palestinian Territories&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Somaliland Region&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Hong Kong SAR China&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Turkiye&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Somaliland region&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Trinidad  Tobago&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Northern Cyprus&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Congo (Brazzaville)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Congo (Kinshasa)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ivory Coast&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;North Cyprus&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Swaziland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;State of Palestine&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Taiwan Province of China&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Macedonia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Hong Kong S.A.R. of China&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Log GDP per capita:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0wxfwpy1jfrjs218232xr0twenqf].[avg:Log GDP per capita:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:Log GDP per capita:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Calculation_1261570877838663680:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0wxfwpy1jfrjs218232xr0twenqf].[avg:Calculation_1261570877838663680:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0wxfwpy1jfrjs218232xr0twenqf].[sum:Calculation_1261570877838663680:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:Freedom to make life choices:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:Perceptions of corruption:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0wxfwpy1jfrjs218232xr0twenqf].[sum:Perceptions of corruption:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0wxfwpy1jfrjs218232xr0twenqf].[usr:Calculation_1261570877838663680:qk]:2&quot;</bucket>
            </map>
            <map to='#d3d3d3'>
              <bucket>&quot;[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:max Corruption (copy)_1261570878035443721:qk]&quot;</bucket>
            </map>
            <map to='#d3d3d3'>
              <bucket>&quot;[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:max Generosity (copy)_1261570877843177475:qk]&quot;</bucket>
            </map>
            <map to='#d5d5d5'>
              <bucket>&quot;[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:Calculation_1261570877838663680:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0wxfwpy1jfrjs218232xr0twenqf].[sum:max Generosity (copy)_1261570877843177475:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0wxfwpy1jfrjs218232xr0twenqf].[usr:Calculation_1261570877838663680:qk]:1&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0wxfwpy1jfrjs218232xr0twenqf].[usr:Calculation_1261570877838663680:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:GDP Color (copy)_1261570878035779594:nk]' palette='traffic_light_10_0' type='palette'>
            <map to='#59a14f'>
              <bucket>&quot;green&quot;</bucket>
            </map>
            <map to='#b60a1c'>
              <bucket>&quot;red&quot;</bucket>
            </map>
            <map to='#f0bd27'>
              <bucket>&quot;yellow&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Germany&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <object-graph>
        <objects>
          <object caption='happiness_all_years.csv' id='happiness_all_years.csv_B0187F1CA4954741817E7CAF4B738B52'>
            <properties context=''>
              <relation connection='textscan.18pn9ug0p8wlqq13ur7dg0w819fw' name='happiness_all_years.csv' table='[happiness_all_years#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_DE'>
                  <column datatype='string' name='Country name' ordinal='0' />
                  <column datatype='integer' name='Happiness rank' ordinal='1' />
                  <column datatype='string' name='Happiness score' ordinal='2' />
                  <column datatype='string' name='Log GDP per capita' ordinal='3' />
                  <column datatype='string' name='Social support' ordinal='4' />
                  <column datatype='string' name='Healthy life expectancy' ordinal='5' />
                  <column datatype='string' name='Freedom to make life choices' ordinal='6' />
                  <column datatype='string' name='Generosity' ordinal='7' />
                  <column datatype='string' name='Perceptions of corruption' ordinal='8' />
                  <column datatype='integer' name='Year' ordinal='9' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </object-graph>
    </datasource>
  </datasources>
  <shared-views>
    <shared-view name='federated.0wxfwpy1jfrjs218232xr0twenqf'>
      <datasources>
        <datasource caption='happiness_all_years' name='federated.0wxfwpy1jfrjs218232xr0twenqf' />
      </datasources>
      <datasource-dependencies datasource='federated.0wxfwpy1jfrjs218232xr0twenqf'>
        <column datatype='string' name='[Country name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
        <column-instance column='[Country name]' derivation='None' name='[none:Country name:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='categorical' column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]'>
        <groupfilter function='member' level='[none:Country name:nk]' member='&quot;Serbia&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
        <target field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' />
      </filter>
    </shared-view>
  </shared-views>
  <actions>
    <action caption='Highlight 1 (generated)' name='[Action2_5F6C44E508834409B1522098B60ABC94]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Perceptions of Corruption' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Measure Names' />
        <param name='target' value='Perceptions of Corruption' />
      </command>
    </action>
    <action caption='Highlight 2 (generated)' name='[Action2_9967429D8D164694B3862DA999AABEC1]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='GDP' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Measure Names' />
        <param name='target' value='GDP' />
      </command>
    </action>
    <action caption='Highlight 1 (generated) 1' name='[Action3_AE84EF97ED724284B8DF0DD45D0E09B4]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Freedom' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Measure Names' />
        <param name='target' value='Freedom' />
      </command>
    </action>
    <action caption='Filter 1 (generated)' name='[Action4_C9DFB54D89984FBEBF40420AB6BCDD73]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Happiness score' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Freedom'>
      <table>
        <view>
          <datasources>
            <datasource caption='happiness_all_years' name='federated.0wxfwpy1jfrjs218232xr0twenqf' />
          </datasources>
          <datasource-dependencies datasource='federated.0wxfwpy1jfrjs218232xr0twenqf'>
            <column caption='Freedom Diff' datatype='real' default-format='p0%' name='[Corruption Diff (copy)_1261570878038765579]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([max Corruption (copy)_1261570878035443721] - [Freedom to make life choices])/[max Corruption (copy)_1261570878035443721]' />
            </column>
            <column datatype='string' name='[Country name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' datatype-customized='true' name='[Freedom to make life choices]' role='measure' type='quantitative' />
            <column caption='Freedom Color' datatype='string' name='[GDP Color (copy)_1261570878035779594]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Freedom to make life choices]/ [max Corruption (copy)_1261570878035443721] &lt; 0.5 THEN &quot;red&quot;  &#13;&#10;ELSEIF [Freedom to make life choices]/ [max Corruption (copy)_1261570878035443721] &lt; 0.75 THEN &quot;yellow&quot;  &#13;&#10;ELSE &quot;green&quot;  &#13;&#10;END' />
            </column>
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Corruption Diff (copy)_1261570878038765579]' derivation='Attribute' name='[attr:Corruption Diff (copy)_1261570878038765579:qk]' pivot='key' type='quantitative' />
            <column caption='max Freedom' datatype='real' name='[max Corruption (copy)_1261570878035443721]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='{FIXED [Year] : MAX([Freedom to make life choices])}' />
            </column>
            <column-instance column='[Freedom to make life choices]' derivation='Max' name='[max:Freedom to make life choices:qk]' pivot='key' type='quantitative' />
            <column-instance column='[max Corruption (copy)_1261570878035443721]' derivation='Max' name='[max:max Corruption (copy)_1261570878035443721:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country name]' derivation='None' name='[none:Country name:nk]' pivot='key' type='nominal' />
            <column-instance column='[GDP Color (copy)_1261570878035779594]' derivation='None' name='[none:GDP Color (copy)_1261570878035779594:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[Action (Country name,Year)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action4_C9DFB54D89984FBEBF40420AB6BCDD73]' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[Country name]' member='&quot;Serbia&quot;' />
              <groupfilter function='member' level='[none:Year:ok]' member='2024' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Year:ok]'>
            <groupfilter function='level-members' level='[none:Year:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Year:ok]</column>
            <column>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]</column>
            <column>[federated.0wxfwpy1jfrjs218232xr0twenqf].[Action (Country name,Year)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='width' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:max Corruption (copy)_1261570878035443721:qk]' value='64' />
            <format attr='auto-subtitle' class='0' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:max Corruption (copy)_1261570878035443721:qk]' scope='rows' value='true' />
            <format attr='title' class='0' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:max Corruption (copy)_1261570878035443721:qk]' scope='rows' value='' />
            <encoding attr='space' class='0' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:Freedom to make life choices:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='0' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:Freedom to make life choices:qk]' scope='rows' value='false' />
            <format attr='width' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:Freedom to make life choices:qk]' value='64' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' value='111' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.9890055656433105' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
          <pane id='9' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:max Corruption (copy)_1261570878035443721:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='cell'>
                <format attr='text-align' value='center' />
                <format attr='vertical-align' value='top' />
                <format attr='wrap' value='on' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='size' value='1.9890055656433105' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='10' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:Freedom to make life choices:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:GDP Color (copy)_1261570878035779594:nk]' />
              <text column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Corruption Diff (copy)_1261570878038765579:qk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run bold='true' fontsize='12'>GAP: </run>
                <run bold='true' fontsize='12'><![CDATA[<[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Corruption Diff (copy)_1261570878038765579:qk]>]]></run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.9890055656433105' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0wxfwpy1jfrjs218232xr0twenqf].[max:max Corruption (copy)_1261570878035443721:qk] + [federated.0wxfwpy1jfrjs218232xr0twenqf].[max:Freedom to make life choices:qk])</rows>
        <cols>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]</cols>
      </table>
      <simple-id uuid='{A377F89A-0C74-4A91-8DCA-927FDC2E0B54}' />
    </worksheet>
    <worksheet name='GDP'>
      <table>
        <view>
          <datasources>
            <datasource caption='happiness_all_years' name='federated.0wxfwpy1jfrjs218232xr0twenqf' />
          </datasources>
          <datasource-dependencies datasource='federated.0wxfwpy1jfrjs218232xr0twenqf'>
            <column caption='max GDP' datatype='real' name='[Calculation_1261570877838663680]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='{FIXED [Year] : MAX([Log GDP per capita])}' />
            </column>
            <column caption='GDP Color' datatype='string' name='[Calculation_1261570878024765446]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Log GDP per capita]/ [Calculation_1261570877838663680] &lt; 0.5 THEN &quot;red&quot;  &#13;&#10;ELSEIF [Log GDP per capita]/ [Calculation_1261570877838663680] &lt; 0.75 THEN &quot;yellow&quot;  &#13;&#10;ELSE &quot;green&quot;  &#13;&#10;END' />
            </column>
            <column datatype='string' name='[Country name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='GDP Diff' datatype='real' default-format='p0%' name='[Freedom Diff (copy)_1261570878040260620]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_1261570877838663680] - [Log GDP per capita])/[Calculation_1261570877838663680]' />
            </column>
            <column datatype='real' datatype-customized='true' name='[Log GDP per capita]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Freedom Diff (copy)_1261570878040260620]' derivation='Attribute' name='[attr:Freedom Diff (copy)_1261570878040260620:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Log GDP per capita]' derivation='Attribute' name='[attr:Log GDP per capita:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1261570877838663680]' derivation='Max' name='[max:Calculation_1261570877838663680:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1261570878024765446]' derivation='None' name='[none:Calculation_1261570878024765446:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country name]' derivation='None' name='[none:Country name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[Action (Country name,Year)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action4_C9DFB54D89984FBEBF40420AB6BCDD73]' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[Country name]' member='&quot;Serbia&quot;' />
              <groupfilter function='member' level='[none:Year:ok]' member='2024' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Year:ok]' context='true'>
            <groupfilter function='level-members' level='[none:Year:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Year:ok]</column>
            <column>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]</column>
            <column>[federated.0wxfwpy1jfrjs218232xr0twenqf].[Action (Country name,Year)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Log GDP per capita:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='0' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Log GDP per capita:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' value='94' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.9890055656433105' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Log GDP per capita:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Calculation_1261570878024765446:nk]' />
              <text column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Freedom Diff (copy)_1261570878040260620:qk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run bold='true' fontsize='14'>GAP: &lt;</run>
                <run bold='true' fontsize='14'>[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Freedom Diff (copy)_1261570878040260620:qk]</run>
                <run bold='true' fontsize='14'>&gt;</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.9890055656433105' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
          <pane id='8' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:Calculation_1261570877838663680:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.9890055656433105' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0wxfwpy1jfrjs218232xr0twenqf].[max:Calculation_1261570877838663680:qk] + [federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Log GDP per capita:qk])</rows>
        <cols>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]</cols>
      </table>
      <simple-id uuid='{A8A5D5E6-1C19-458A-8D4A-000CBAD3D9F6}' />
    </worksheet>
    <worksheet name='Happiness score'>
      <table>
        <view>
          <datasources>
            <datasource caption='happiness_all_years' name='federated.0wxfwpy1jfrjs218232xr0twenqf' />
          </datasources>
          <datasource-dependencies datasource='federated.0wxfwpy1jfrjs218232xr0twenqf'>
            <column datatype='string' name='[Country name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' datatype-customized='true' name='[Happiness score]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Happiness score]' derivation='Attribute' name='[attr:Happiness score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country name]' derivation='None' name='[none:Country name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Year:qk]' included-values='in-range'>
            <min>2015</min>
            <max>2024</max>
          </filter>
          <slices>
            <column>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]</column>
            <column>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Year:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' domain-expand='false' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Happiness score:qk]' field-type='quantitative' range-type='uniform' scope='rows' type='space' />
            <format attr='title' class='0' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Happiness score:qk]' scope='rows' value='' />
            <format attr='height' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Year:qk]' value='65' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Happiness score:qk]</rows>
        <cols>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Year:qk]</cols>
      </table>
      <simple-id uuid='{F47CB01B-BF33-4B79-9BBA-6E79C5A62328}' />
    </worksheet>
    <worksheet name='Perceptions of Corruption'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='12'>&lt;Sheet Name&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='happiness_all_years' name='federated.0wxfwpy1jfrjs218232xr0twenqf' />
          </datasources>
          <datasource-dependencies datasource='federated.0wxfwpy1jfrjs218232xr0twenqf'>
            <column caption='Corruption Diff' datatype='real' default-format='p0%' name='[Calculation_1261570878029086728]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([max Generosity (copy)_1261570877843177475] - [Perceptions of corruption])/[max Generosity (copy)_1261570877843177475]' />
            </column>
            <column datatype='string' name='[Country name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Corruption Color' datatype='string' name='[GDP Color (copy)_1261570878026129415]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Perceptions of corruption]/ [max Generosity (copy)_1261570877843177475] &lt; 0.5 THEN &quot;red&quot;  &#13;&#10;ELSEIF [Perceptions of corruption]/ [max Generosity (copy)_1261570877843177475] &lt; 0.75 THEN &quot;yellow&quot;  &#13;&#10;ELSE &quot;green&quot;  &#13;&#10;END' />
            </column>
            <column datatype='real' datatype-customized='true' name='[Perceptions of corruption]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Calculation_1261570878029086728]' derivation='Attribute' name='[attr:Calculation_1261570878029086728:qk]' pivot='key' type='quantitative' />
            <column caption='max Corruption' datatype='real' name='[max Generosity (copy)_1261570877843177475]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='{FIXED [Year] : MAX([Perceptions of corruption])}' />
            </column>
            <column-instance column='[Perceptions of corruption]' derivation='Max' name='[max:Perceptions of corruption:qk]' pivot='key' type='quantitative' />
            <column-instance column='[max Generosity (copy)_1261570877843177475]' derivation='Max' name='[max:max Generosity (copy)_1261570877843177475:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country name]' derivation='None' name='[none:Country name:nk]' pivot='key' type='nominal' />
            <column-instance column='[GDP Color (copy)_1261570878026129415]' derivation='None' name='[none:GDP Color (copy)_1261570878026129415:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[Action (Country name,Year)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action4_C9DFB54D89984FBEBF40420AB6BCDD73]' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[Country name]' member='&quot;Serbia&quot;' />
              <groupfilter function='member' level='[none:Year:ok]' member='2024' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Year:ok]'>
            <groupfilter function='level-members' level='[none:Year:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Year:ok]</column>
            <column>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]</column>
            <column>[federated.0wxfwpy1jfrjs218232xr0twenqf].[Action (Country name,Year)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:Perceptions of corruption:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='0' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:Perceptions of corruption:qk]' scope='rows' value='false' />
            <format attr='width' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:max Generosity (copy)_1261570877843177475:qk]' value='64' />
            <format attr='width' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:Perceptions of corruption:qk]' value='64' />
            <format attr='auto-subtitle' class='0' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:max Generosity (copy)_1261570877843177475:qk]' scope='rows' value='true' />
            <format attr='title' class='0' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:max Generosity (copy)_1261570877843177475:qk]' scope='rows' value='' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' value='111' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.9890055656433105' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
          <pane id='9' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:max Generosity (copy)_1261570877843177475:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='cell'>
                <format attr='text-align' value='center' />
                <format attr='vertical-align' value='top' />
                <format attr='wrap' value='on' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='size' value='1.9890055656433105' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='10' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0wxfwpy1jfrjs218232xr0twenqf].[max:Perceptions of corruption:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:GDP Color (copy)_1261570878026129415:nk]' />
              <text column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Calculation_1261570878029086728:qk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run bold='true' fontsize='12'>GAP: &lt;</run>
                <run bold='true' fontsize='12'>[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Calculation_1261570878029086728:qk]</run>
                <run bold='true' fontsize='12'>&gt;</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.9890055656433105' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0wxfwpy1jfrjs218232xr0twenqf].[max:max Generosity (copy)_1261570877843177475:qk] + [federated.0wxfwpy1jfrjs218232xr0twenqf].[max:Perceptions of corruption:qk])</rows>
        <cols>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]</cols>
      </table>
      <simple-id uuid='{D40823BC-EF14-4977-B0BD-04F9A683E4FC}' />
    </worksheet>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='happiness_all_years' name='federated.0wxfwpy1jfrjs218232xr0twenqf' />
          </datasources>
          <datasource-dependencies datasource='federated.0wxfwpy1jfrjs218232xr0twenqf'>
            <column datatype='string' name='[Country name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' datatype-customized='true' name='[Happiness score]' role='measure' type='quantitative' />
            <column datatype='real' datatype-customized='true' name='[Perceptions of corruption]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Happiness score]' derivation='Attribute' name='[attr:Happiness score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Perceptions of corruption]' derivation='Attribute' name='[attr:Perceptions of corruption:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country name]' derivation='None' name='[none:Country name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Happiness score:qk]' included-values='in-range'>
            <min>1.7210000000000003</min>
            <max>7.8419999999999996</max>
          </filter>
          <slices>
            <column>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]</column>
            <column>[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Happiness score:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' />
            </encodings>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Happiness score:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' />
            </encodings>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Perceptions of corruption:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Happiness score:qk] + [federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Perceptions of corruption:qk])</rows>
        <cols>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Year:qk]</cols>
      </table>
      <simple-id uuid='{AE200761-F1E8-4EF0-8D20-3A59E8FA9376}' />
    </worksheet>
    <worksheet name='Sheet 1 (2)'>
      <table>
        <view>
          <datasources>
            <datasource caption='happiness_all_years' name='federated.0wxfwpy1jfrjs218232xr0twenqf' />
          </datasources>
          <datasource-dependencies datasource='federated.0wxfwpy1jfrjs218232xr0twenqf'>
            <column datatype='string' name='[Country name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' datatype-customized='true' name='[Social support]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Social support]' derivation='Attribute' name='[attr:Social support:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country name]' derivation='None' name='[none:Country name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <slices>
            <column>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Social support:qk]</rows>
        <cols>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Year:qk]</cols>
      </table>
      <simple-id uuid='{44E44493-5AC9-42AA-9CE3-D1BC79E786C9}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' preset-index='1' sizing-mode='fixed' />
      <datasources>
        <datasource caption='happiness_all_years' name='federated.0wxfwpy1jfrjs218232xr0twenqf' />
      </datasources>
      <datasource-dependencies datasource='federated.0wxfwpy1jfrjs218232xr0twenqf'>
        <column datatype='string' name='[Country name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
        <column-instance column='[Country name]' derivation='None' name='[none:Country name:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='75375' id='7' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
            <zone fixed-size='576' h='75375' id='5' is-fixed='true' type-v2='layout-basic' w='57600' x='800' y='1000'>
              <zone h='75375' id='3' name='GDP' w='29964' x='800' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='75375' id='10' name='Perceptions of Corruption' w='27636' x='30764' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone h='75375' id='13' name='Freedom' w='25300' x='58400' y='1000'>
              <layout-cache cell-count-w='1' non-cell-size-w='65' type-h='fixed' type-w='cell' />
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='4' />
              </zone-style>
            </zone>
            <zone fixed-size='155' h='75375' id='6' is-fixed='true' param='vert' type-v2='layout-flow' w='15500' x='83700' y='1000'>
              <zone h='7625' id='8' mode='dropdown' name='GDP' param='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' type-v2='filter' w='15500' x='83700' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='6375' id='18' name='Happiness score' pane-specification-id='0' param='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' type-v2='color' w='15500' x='83700' y='8625'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone h='22625' id='16' param='vert' type-v2='layout-flow' w='98400' x='800' y='76375'>
            <zone h='22625' id='17' name='Happiness score' w='98400' x='800' y='76375'>
              <layout-cache minheight='215' type-h='scalable' type-w='fixed' />
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='4' />
              </zone-style>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1200' minheight='1200' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='22' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='21' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone h='7625' id='8' mode='dropdown' name='GDP' param='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' type-v2='filter' w='15500' x='83700' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='75375' id='3' is-fixed='true' name='GDP' w='29964' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='75375' id='10' is-fixed='true' name='Perceptions of Corruption' w='27636' x='30764' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='75375' id='13' is-fixed='true' name='Freedom' w='25300' x='58400' y='1000'>
                  <layout-cache cell-count-w='1' non-cell-size-w='65' type-h='fixed' type-w='cell' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='173' h='22625' id='17' is-fixed='true' name='Happiness score' w='98400' x='800' y='76375'>
                  <layout-cache minheight='215' type-h='scalable' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6375' id='18' name='Happiness score' pane-specification-id='0' param='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' type-v2='color' w='15500' x='83700' y='8625'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{6A026B5B-C3E2-45E6-A577-BA9CE3EF2CE5}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Happiness score:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card param='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' type='filter' />
            <card pane-specification-id='1' param='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]</field>
            <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Happiness score:nk]</field>
            <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Happiness score:ok]</field>
            <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{DFCC8503-B9C8-4108-935F-BFA2815A888D}' />
    </window>
    <window class='worksheet' name='Sheet 1 (2)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' size='395' type='filter' />
            <card pane-specification-id='1' param='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' size='13' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]</field>
            <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Happiness score:nk]</field>
            <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Happiness score:ok]</field>
            <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{724CC367-FB59-45ED-AC03-EB45DA58D203}' />
    </window>
    <window class='worksheet' name='GDP'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' type='filter' />
            <card pane-specification-id='8' param='[federated.0wxfwpy1jfrjs218232xr0twenqf].[:Measure Names]' type='color' />
            <card pane-specification-id='7' param='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Calculation_1261570878024765446:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]</field>
            <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Year:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{15F887C4-5645-4C01-9C59-A61702031D9F}' />
    </window>
    <window class='worksheet' name='Perceptions of Corruption'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' type='filter' />
            <card pane-specification-id='9' param='[federated.0wxfwpy1jfrjs218232xr0twenqf].[:Measure Names]' type='color' />
            <card pane-specification-id='10' param='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:GDP Color (copy)_1261570878026129415:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]</field>
            <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:GDP Color (copy)_1261570878026129415:nk]</field>
            <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Year:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1432D63A-2C1B-45F6-98D5-CD02E53EC457}' />
    </window>
    <window class='worksheet' maximized='true' name='Freedom'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' type='filter' />
            <card pane-specification-id='9' param='[federated.0wxfwpy1jfrjs218232xr0twenqf].[:Measure Names]' type='color' />
            <card pane-specification-id='10' param='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:GDP Color (copy)_1261570878035779594:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]</field>
            <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Year:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{808CF29C-6CC4-43B3-AD74-1D619B46810B}' />
    </window>
    <window class='worksheet' name='Happiness score'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]</field>
            <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C9295C3C-80B2-4D82-B3DD-AF6E7C9D39E2}' />
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Freedom'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='GDP'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Happiness score'>
          <zoom type='entire-view' />
          <selection-collection>
            <tuple-selection>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields>
                      <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Year:qk]</field>
                    </x-fields>
                    <y-fields>
                      <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Happiness score:qk]</field>
                    </y-fields>
                  </pane-descriptor>
                  <columns>
                    <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Country name:nk]</field>
                    <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[none:Year:qk]</field>
                    <field>[federated.0wxfwpy1jfrjs218232xr0twenqf].[attr:Happiness score:qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Serbia&quot;</value>
                  <value>2024</value>
                  <value>6.4109999999999996</value>
                </tuple>
              </tuple-reference>
            </tuple-selection>
          </selection-collection>
          <floating-toolbar-visibility value='1' />
        </viewpoint>
        <viewpoint name='Perceptions of Corruption'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{D158D4FA-D72A-4393-9591-62C1909C6C91}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Freedom' width='179'>
      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
    </thumbnail>
    <thumbnail height='192' name='GDP' width='162'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='Happiness score' width='192'>
      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
      Qhh/m9n32QAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Perceptions of Corruption' width='179'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 1 (2)' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
